# Each syntax entry consits of the following:
# (human_readable value  ,   enum_value , notes)
# The syntax.cpp utility will create two different files from this one:
#
# syntax.h
#   enum MoguSyntax {
#       enum_value_0    =0,
#           ...
#       enum_value_n    =n
#   }
#
# syntax.py
#   syntaxMapStrings {
#       human_readable_value_0  :   (0,notes),
#               ...
#       human_readable_value_n  :   (n, notes)
#   }
#

(   None                    ,   __NONE__        ,   null bit        )

# A widget that is referring to itself.
(   own|self                ,   own             ,   object          )

# Not yet implemented - handles custom uris.
(   perspective             ,   perspective     ,   object          )

(   clicked|click           ,   click           ,   event trigger   )
(   mouseover               ,   mouseover       ,   event trigger   )
(   mouseout                ,   mouseout        ,   event trigger   )
(   style changed           ,   style_changed   ,   event trigger   )
(   keyup                   ,   keyup           ,   event trigger   )  
(   failed test             ,   fail            ,   event trigger   )
(   succeeded test          ,   succeed         ,   event trigger   )
(   enter pressed           ,   enter_pressed   ,   event trigger   )
(   hidden changed          ,   hidden_changed  ,   event trigger   )
(   index changed           ,   index_changed   ,   event trigger   ) 
(   loaded                  ,   onload          ,   event trigger   )


(   clear                   ,   clear           ,   action          )
(   increment|incr          ,   increment       ,   action          )
(   decrement|decr          ,   decrement       ,   action          )
(   test                    ,   test            ,   action attribute hashkey )
(   tooltip                 ,   tooltip         ,   hashkey         )
(   email                   ,   email           ,   action          )
(   reload                  ,   reload          ,   action          )
(   emit                    ,   emit            ,   action          )
(   append                  ,   append          ,   action          )
(   set                     ,   set             ,   action datatype )
(   path                    ,   path            ,   object          )
(   user                    ,   user            ,   object          )
(   session                 ,   session         ,   object          )
(   app                     ,   app             ,   object          )
(   reset                   ,   reset           ,   action          )
(   style|css               ,   style           ,   attribute hashkey  )
(   group                   ,   group           ,   object          )
(   remove                  ,   remove          ,   action          )
(   text|content|contents   ,   text            ,   attribute hashkey widget type )
(   validator               ,   validator       ,   object attribute)
(   regex                   ,   regex           ,   attribute validator type )
(   list                    ,   list            ,   attribute datatype )
(   string                  ,   string          ,   attribute datatype )
(   hash                    ,   hash            ,   action datatype )
(   data                    ,   data            ,   object          )
(   index                   ,   index           ,   attribute       )
(   slot                    ,   slot            ,   object          )

# As an action, allows execution of javascript.
# As a validator type, will run the contents of a field through a
# script executable on the backend, which must echo 'true' or 'false' 
# to stderr.
(   script                  ,   script          ,   action validator type )

(   link                    ,   anchor          ,   widget type     )
(   image                   ,   image           ,   widget type     )
(   submit                  ,   submit          ,   widget type     )
(   radio                   ,   radio           ,   widget type     )
(   textarea                ,   textarea        ,   widget type     )
(   input                   ,   input           ,   widget type     )
(   dropdown                ,   dropdown        ,   widget type     )   
(   multi                   ,   multi           ,   widget type     )
(   container               ,   container       ,   widget type     )
(   password                ,   password        ,   widget type attribute object )
(   stack                   ,   stack           ,   widget type     )
(   name                    ,   name            ,   attribute hashkey )
(   hidden                  ,   hidden          ,   widget type attribute  )
(   image link              ,   image_link      ,   widget type     )

# All prepositions are treated equally in the backend. And yes, I know
# 'is' is not a preposition, but contextually the same for purposes.
(   to|as|at|with|from|for|is  ,   preposition              ,   preposition     )
(   widget                  ,   widget          ,   object          )
(   type                    ,   type            ,   hashkey         )
(   encrypted               ,   encrypted       ,   hashkey         )
(   mode                    ,   mode            ,   hashkey         )
(   source                  ,   source          ,   hashkey attribute  )
(   location                ,   location        ,   hashkey attribute  )
(   template                ,   template        ,   hashkey         )
(   member                  ,   member          ,   object attribute  )
(   get                     ,   get             ,   action          )
(   moderator               ,   moderator       ,   descriptor  )
(   write                   ,   write           ,   access_level )
(   read                    ,   read            ,   access_level )
(   default                 ,   default_        ,   hashkey )
(   meta                    ,   meta            ,   prefix )

# Keys are attached to groups. A given key value will correlate to 
# at most one group ID, and can be used for reverse lookups of groups,
# based on a code [the key] given to users.
(   key                     ,   key             ,   object )
