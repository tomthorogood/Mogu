From 022d572733aaad44687bb22178830822a2cb962f Mon Sep 17 00:00:00 2001
From: adam traub <adamtraub@EdPA-LinuxBox.(none)>
Date: Fri, 7 Sep 2012 15:49:59 -0400
Subject: [PATCH 1/6] Created import directory functionality

---
 cli/mogu |  153 ++++++++++++++++++++++++++++++++++++--------------------------
 1 file changed, 88 insertions(+), 65 deletions(-)

diff --git a/cli/mogu b/cli/mogu
index 54b2eb9..a7ba7b5 100755
--- a/cli/mogu
+++ b/cli/mogu
@@ -7,8 +7,13 @@ from redis import Redis
 from ConfigParser import SafeConfigParser
 from ConfigParser import NoOptionError
 
+from os import listdir
+from os.path import abspath
+
+
 #import mogu.io
 import sys
+import re
 
 VERSION="0.8.03 alpha"
 
@@ -20,72 +25,9 @@ try:
 except NoOptionError:
     auth = None
 
-parser = ArgumentParser(description="The command line utility for interacting with your Mogu web aplication")
-parser.add_argument("command", nargs='+', type=str, action="store", help="The command you want to run (see readme for available commands")
-
-#Mogu specific variables
-parser.add_argument("--node-type", dest="node", type=str, action="store", help="The sort of node you're interacting with (event/widget)")
-
-
-# Options for configuring your Redis connection
-parser.add_argument("--redis-select", 
-        type=int, dest="redis_db", 
-        action="store", default=config.get("redis_instance","database"), 
-        help="Optional Redis database number (default is read from config file)")
-
-parser.add_argument("--redis-port", 
-        type=int, dest="redis_port", 
-        action="store", default=config.get("redis_instance","port"),
-        help="Optional Redis port (default is read from config file)")
-
-parser.add_argument("--redis-host", 
-        type=str, dest="redis_host", 
-        action="store", default=config.get("redis_instance","host"), 
-        help="Optional Redis host (default is read from config file")
-
-parser.add_argument("--redis-auth", 
-        type=str, dest="redis_auth", action="store", 
-        default=auth,help="Optional Redis auth password (can be set in config file)")
-
-# Boolean options for interacting with the Redis environment
-parser.add_argument("--redis-flush", 
-        dest="flushdb", action="store_true", 
-        default=False, 
-        help="If importing a Mogu database, flushes the selected database first. CAREFUL!")
-
-parser.add_argument("--assume-yes", 
-        dest="yes", action="store_true", default=False, 
-        help="Will assume yes to all questions. EXTRA CAREFUL!")
-
-parser.add_argument("-v", "--verbose",
-        dest="verbose", action="store_true", default=False,
-        help="Will make the import command more verbose when assuming yes")
-
-parser.add_argument("--test-only", 
-        dest="testing", action="store_true", default=False, 
-        help="Displays various information depending on the command, making no changes to your database.")
 
-parser.add_argument("--filename", 
-        dest="filename", action="store", default=None, 
-        help="The filename that will be used by some commands, such as for importing or exporting. See the readme for extra information.")
-
-parser.add_argument("--merge",
-        dest="merge", action="store_true", default=False,
-        help="Will not delete nodes before setting values, which could result in unexpected behaviour, but can make things easier when adding one-offs."
-        )
-
-
-args = parser.parse_args()
-
-# Check for required commands and get confirmations for certain commands
-
-command = args.command[0]
-
-db = Redis(args.redis_host, args.redis_port, args.redis_db, args.redis_auth)
-
-# mogu import filename F [--merge --redis-port --redis-host --redis-select --redis-auth --redis-flush --assume-yes --test-only]
-if command == "import":
-    for filename in args.command[1:]:
+def import_file(args, filenames):
+    for filename in filenames:
         if args.flushdb:
             message = warn(
                     "WARNING: This will overwrite all data in datbase number %d  of your Redis instance at %s:%d" % (
@@ -176,6 +118,87 @@ if command == "import":
             v.build(validator)
             v._import(db, package.validators[validator], dflags)
 
+
+
+
+parser = ArgumentParser(description="The command line utility for interacting with your Mogu web aplication")
+parser.add_argument("command", nargs='+', type=str, action="store", help="The command you want to run (see readme for available commands")
+
+#Mogu specific variables
+parser.add_argument("--node-type", dest="node", type=str, action="store", help="The sort of node you're interacting with (event/widget)")
+
+
+# Options for configuring your Redis connection
+parser.add_argument("--redis-select", 
+        type=int, dest="redis_db", 
+        action="store", default=config.get("redis_instance","database"), 
+        help="Optional Redis database number (default is read from config file)")
+
+parser.add_argument("--redis-port", 
+        type=int, dest="redis_port", 
+        action="store", default=config.get("redis_instance","port"),
+        help="Optional Redis port (default is read from config file)")
+
+parser.add_argument("--redis-host", 
+        type=str, dest="redis_host", 
+        action="store", default=config.get("redis_instance","host"), 
+        help="Optional Redis host (default is read from config file")
+
+parser.add_argument("--redis-auth", 
+        type=str, dest="redis_auth", action="store", 
+        default=auth,help="Optional Redis auth password (can be set in config file)")
+
+# Boolean options for interacting with the Redis environment
+parser.add_argument("--redis-flush", 
+        dest="flushdb", action="store_true", 
+        default=False, 
+        help="If importing a Mogu database, flushes the selected database first. CAREFUL!")
+
+parser.add_argument("--assume-yes", 
+        dest="yes", action="store_true", default=False, 
+        help="Will assume yes to all questions. EXTRA CAREFUL!")
+
+parser.add_argument("-v", "--verbose",
+        dest="verbose", action="store_true", default=False,
+        help="Will make the import command more verbose when assuming yes")
+
+parser.add_argument("--test-only", 
+        dest="testing", action="store_true", default=False, 
+        help="Displays various information depending on the command, making no changes to your database.")
+
+parser.add_argument("--filename", 
+        dest="filename", action="store", default=None, 
+        help="The filename that will be used by some commands, such as for importing or exporting. See the readme for extra information.")
+
+parser.add_argument("--merge",
+        dest="merge", action="store_true", default=False,
+        help="Will not delete nodes before setting values, which could result in unexpected behaviour, but can make things easier when adding one-offs."
+        )
+
+
+args = parser.parse_args()
+
+# Check for required commands and get confirmations for certain commands
+
+command = args.command[0]
+
+db = Redis(args.redis_host, args.redis_port, args.redis_db, args.redis_auth)
+
+# mogu import filename F [--merge --redis-port --redis-host --redis-select --redis-auth --redis-flush --assume-yes --test-only]
+if command == "import":
+    import_file(args, args.command[1:])
+
+if command == "import-directory":
+    for directory in args.command[1:]:
+        dir_path = abspath(directory)
+        
+        pyFiles = [dir_path+"/"+filename for filename in listdir(directory) if re.search("^.*\.(py)$", filename)]
+        moguFiles = [dir_path+"/"+filename for filename in listdir(directory) if re.search("^.*\.(mogu)$",filename)]
+
+        import_file(args, pyFiles)
+        import_file(args, moguFiles)
+
+
 # mogo export filename [--resis-port --redis-host --redis-select --redis-auth]
 if command == "export":
     if len(args.command) is 1:
-- 
1.7.9.6


From ec1ca5aaa31ada1b5fd7beab295f8089b5c6d0e4 Mon Sep 17 00:00:00 2001
From: adam traub <adamtraub@EdPA-LinuxBox.(none)>
Date: Fri, 7 Sep 2012 15:56:22 -0400
Subject: [PATCH 2/6] Efficiency improvement to import-directory

---
 cli/mogu |    7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/cli/mogu b/cli/mogu
index a7ba7b5..1ec0f4b 100755
--- a/cli/mogu
+++ b/cli/mogu
@@ -191,9 +191,10 @@ if command == "import":
 if command == "import-directory":
     for directory in args.command[1:]:
         dir_path = abspath(directory)
-        
-        pyFiles = [dir_path+"/"+filename for filename in listdir(directory) if re.search("^.*\.(py)$", filename)]
-        moguFiles = [dir_path+"/"+filename for filename in listdir(directory) if re.search("^.*\.(mogu)$",filename)]
+        filenames = listdir(directory)
+
+        pyFiles = [dir_path+"/"+filename for filename in filenames if re.search("^.*\.(py)$", filename)]
+        moguFiles = [dir_path+"/"+filename for filename in filenames if re.search("^.*\.(mogu)$",filename)]
 
         import_file(args, pyFiles)
         import_file(args, moguFiles)
-- 
1.7.9.6


From c7a9548c67e2d252d3b8354a715450765859b339 Mon Sep 17 00:00:00 2001
From: adam traub <adamtraub@EdPA-LinuxBox.(none)>
Date: Fri, 7 Sep 2012 16:02:31 -0400
Subject: [PATCH 3/6] removed unnecessary abspath and added documentation

---
 cli/mogu |   13 ++++++++-----
 1 file changed, 8 insertions(+), 5 deletions(-)

diff --git a/cli/mogu b/cli/mogu
index 1ec0f4b..2411100 100755
--- a/cli/mogu
+++ b/cli/mogu
@@ -8,7 +8,6 @@ from ConfigParser import SafeConfigParser
 from ConfigParser import NoOptionError
 
 from os import listdir
-from os.path import abspath
 
 
 #import mogu.io
@@ -25,7 +24,11 @@ try:
 except NoOptionError:
     auth = None
 
-
+"""
+imports a list of files into the redis database.
+@args - the argparse object used for processing command line arguments
+@filenames - a list of filenames that are being imported
+"""
 def import_file(args, filenames):
     for filename in filenames:
         if args.flushdb:
@@ -190,11 +193,11 @@ if command == "import":
 
 if command == "import-directory":
     for directory in args.command[1:]:
-        dir_path = abspath(directory)
+        dir_path = directory +"/"
         filenames = listdir(directory)
 
-        pyFiles = [dir_path+"/"+filename for filename in filenames if re.search("^.*\.(py)$", filename)]
-        moguFiles = [dir_path+"/"+filename for filename in filenames if re.search("^.*\.(mogu)$",filename)]
+        pyFiles = [dir_path+filename for filename in filenames if re.search("^.*\.(py)$", filename)]
+        moguFiles = [dir_path+filename for filename in filenames if re.search("^.*\.(mogu)$",filename)]
 
         import_file(args, pyFiles)
         import_file(args, moguFiles)
-- 
1.7.9.6


From b7a9f4ac16be2f7d0d67f5d23a07d0f0b6be06ab Mon Sep 17 00:00:00 2001
From: adam traub <adamtraub@EdPA-LinuxBox.(none)>
Date: Fri, 7 Sep 2012 16:05:25 -0400
Subject: [PATCH 4/6] removed regular expressions and added more readability

---
 cli/mogu |    5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/cli/mogu b/cli/mogu
index 2411100..be47553 100755
--- a/cli/mogu
+++ b/cli/mogu
@@ -12,7 +12,6 @@ from os import listdir
 
 #import mogu.io
 import sys
-import re
 
 VERSION="0.8.03 alpha"
 
@@ -196,8 +195,8 @@ if command == "import-directory":
         dir_path = directory +"/"
         filenames = listdir(directory)
 
-        pyFiles = [dir_path+filename for filename in filenames if re.search("^.*\.(py)$", filename)]
-        moguFiles = [dir_path+filename for filename in filenames if re.search("^.*\.(mogu)$",filename)]
+        pyFiles = [dir_path+filename for filename in filenames if filename.endswith(".py")]
+        moguFiles = [dir_path+filename for filename in filenames if filename.endswith(".mogu")]
 
         import_file(args, pyFiles)
         import_file(args, moguFiles)
-- 
1.7.9.6


From 7ab48776c036d8998ee9267dac3bf44d946d27a0 Mon Sep 17 00:00:00 2001
From: adam traub <adamtraub@EdPA-LinuxBox.(none)>
Date: Sat, 8 Sep 2012 14:50:09 -0400
Subject: [PATCH 5/6] moved the import_file function into the importdb module

---
 cli/mogu                |  107 ++---------------------------------------------
 cli/mogu_py/importdb.py |  100 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 103 insertions(+), 104 deletions(-)

diff --git a/cli/mogu b/cli/mogu
index be47553..fc947c1 100755
--- a/cli/mogu
+++ b/cli/mogu
@@ -23,106 +23,6 @@ try:
 except NoOptionError:
     auth = None
 
-"""
-imports a list of files into the redis database.
-@args - the argparse object used for processing command line arguments
-@filenames - a list of filenames that are being imported
-"""
-def import_file(args, filenames):
-    for filename in filenames:
-        if args.flushdb:
-            message = warn(
-                    "WARNING: This will overwrite all data in datbase number %d  of your Redis instance at %s:%d" % (
-                        args.redis_db, args.redis_host, args.redis_port))
-            if not confirm(message,args.yes):
-                print("No problem. If you're nervous, you can always remove the --redis-flush argument from your command")
-                sys.exit()
-            db.flushdb()
-        
-        package = importdb.evaluate_file(filename)
-        dflags = 0
-        lflags = 0
-        sflags = 0
-        if args.testing:
-            dflags |= bytemaps.DictStorage.is_test
-            lflags |= bytemaps.ListStorage.is_test
-            sflags |= bytemaps.StrStorage.is_test
-        if args.merge:
-            dflags |= bytemaps.DictStorage.is_merge
-            lflags |= bytemaps.ListStorage.is_merge
-        if args.yes:
-            dflags |= bytemaps.DictStorage.assume_yes
-            lflags |= bytemaps.ListStorage.assume_yes
-            sflags |= bytemaps.StrStorage.assume_yes
-        if args.verbose:
-            dflags |= bytemaps.DictStorage.verbose
-            lflags |= bytemaps.ListStorage.verbose
-            sflags |= bytemaps.StrStorage.verbose
-        
-        for widget in package.widgets:
-            w = Widget()
-            w.build(widget)
-            w._import(db, package.widgets[widget], dflags)
-
-        for widget in package.events:
-            wevents =0
-            if not args.merge:
-                # Get rid of all current event nodes to avoid duplications
-                current_events = db.keys("*%s.events*" % widget)
-                for e in current_events:
-                    db.delete(e)
-            for event in package.events[widget]:
-                wevents += 1
-                e =  WidgetEvent()
-                e.build(widget, wevents)
-                e._import(db, event, dflags)
-
-        for event in package.global_events:
-            e = GlobalEvent()
-            e.build(event)
-            e._import(db, package.global_events[event], dflags)
-
-        for view in package.perspectives:
-            pmold = 0
-            for mold in package.perspectives[view]:
-                pmold += 1
-                p = PerspectiveMold()
-                p.build(view, pmold)
-                p._import(db, mold, dflags)
-
-        for policy in package.policies:
-            p = WidgetPolicy()
-            p.build(policy)
-            p._import(db, package.policies[policy], dflags)
-
-        for widget in package.tree:
-            w = WidgetChildren()
-            w.build(widget)
-            w._import(db, package.tree[widget], lflags)
-
-        for session in package.sessions:
-            for storage in package.sessions[session]:
-                entry = package.sessions[session][storage]
-                if isinstance(entry, dict):
-                    s = SessionDict()
-                    fl = dflags
-                elif isinstance(entry, list):
-                    s = SessionList()
-                    fl = lflags
-                else:
-                    s = SessionStr()
-                    fl = sflags
-                s.build(session,storage)
-                s._import(db, entry, fl)
-
-        for validator in package.validators:
-            v = Validator()
-            v.build(validator)
-            v._import(db, package.validators[validator], dflags)
-
-
-
-
 parser = ArgumentParser(description="The command line utility for interacting with your Mogu web aplication")
 parser.add_argument("command", nargs='+', type=str, action="store", help="The command you want to run (see readme for available commands")
 
@@ -177,7 +77,6 @@ parser.add_argument("--merge",
         help="Will not delete nodes before setting values, which could result in unexpected behaviour, but can make things easier when adding one-offs."
         )
 
-
 args = parser.parse_args()
 
 # Check for required commands and get confirmations for certain commands
@@ -188,7 +87,7 @@ db = Redis(args.redis_host, args.redis_port, args.redis_db, args.redis_auth)
 
 # mogu import filename F [--merge --redis-port --redis-host --redis-select --redis-auth --redis-flush --assume-yes --test-only]
 if command == "import":
-    import_file(args, args.command[1:])
+    importdb.import_file(db, args, args.command[1:])
 
 if command == "import-directory":
     for directory in args.command[1:]:
@@ -198,8 +97,8 @@ if command == "import-directory":
         pyFiles = [dir_path+filename for filename in filenames if filename.endswith(".py")]
         moguFiles = [dir_path+filename for filename in filenames if filename.endswith(".mogu")]
 
-        import_file(args, pyFiles)
-        import_file(args, moguFiles)
+        importdb.import_file(db, args, pyFiles)
+        importdb.import_file(db, args, moguFiles)
 
 
 # mogo export filename [--resis-port --redis-host --redis-select --redis-auth]
diff --git a/cli/mogu_py/importdb.py b/cli/mogu_py/importdb.py
index 484cdc1..bf4712a 100644
--- a/cli/mogu_py/importdb.py
+++ b/cli/mogu_py/importdb.py
@@ -1,3 +1,6 @@
+from snippets import confirm
+from db_type import *
+
 class ImportPackage(object):
     def __init__(self, widgets, tree, events, perspectives, global_events, meta, policies, sessions, validators):
         self.widgets = widgets
@@ -26,4 +29,101 @@ def evaluate_file(filename):
 
     return ImportPackage(widgets, tree, events, perspectives, global_events, meta, policies, sessions,validators)
 
+"""
+imports a list of files into the redis database.
+@args - the argumentParser object used for processing command line arguments
+@filenames - a list of filenames that are being imported
+"""
+def import_file(db, args, filenames):
+    for filename in filenames:
+        if args.flushdb:
+            message = warn(
+                    "WARNING: This will overwrite all data in datbase number %d  of your Redis instance at %s:%d" % (
+                        args.redis_db, args.redis_host, args.redis_port))
+            if not confirm(message,args.yes):
+                print("No problem. If you're nervous, you can always remove the --redis-flush argument from your command")
+                sys.exit()
+            db.flushdb()
+        
+        package = evaluate_file(filename)
+        dflags = 0
+        lflags = 0
+        sflags = 0
+        if args.testing:
+            dflags |= bytemaps.DictStorage.is_test
+            lflags |= bytemaps.ListStorage.is_test
+            sflags |= bytemaps.StrStorage.is_test
+        if args.merge:
+            dflags |= bytemaps.DictStorage.is_merge
+            lflags |= bytemaps.ListStorage.is_merge
+        if args.yes:
+            dflags |= bytemaps.DictStorage.assume_yes
+            lflags |= bytemaps.ListStorage.assume_yes
+            sflags |= bytemaps.StrStorage.assume_yes
+        if args.verbose:
+            dflags |= bytemaps.DictStorage.verbose
+            lflags |= bytemaps.ListStorage.verbose
+            sflags |= bytemaps.StrStorage.verbose
+        
+        for widget in package.widgets:
+            w = Widget()
+            w.build(widget)
+            w._import(db, package.widgets[widget], dflags)
+
+        for widget in package.events:
+            wevents =0
+            if not args.merge:
+                # Get rid of all current event nodes to avoid duplications
+                current_events = db.keys("*%s.events*" % widget)
+                for e in current_events:
+                    db.delete(e)
+            for event in package.events[widget]:
+                wevents += 1
+                e =  WidgetEvent()
+                e.build(widget, wevents)
+                e._import(db, event, dflags)
+
+        for event in package.global_events:
+            e = GlobalEvent()
+            e.build(event)
+            e._import(db, package.global_events[event], dflags)
+
+        for view in package.perspectives:
+            pmold = 0
+            for mold in package.perspectives[view]:
+                pmold += 1
+                p = PerspectiveMold()
+                p.build(view, pmold)
+                p._import(db, mold, dflags)
+
+        for policy in package.policies:
+            p = WidgetPolicy()
+            p.build(policy)
+            p._import(db, package.policies[policy], dflags)
+
+        for widget in package.tree:
+            w = WidgetChildren()
+            w.build(widget)
+            w._import(db, package.tree[widget], lflags)
+
+        for session in package.sessions:
+            for storage in package.sessions[session]:
+                entry = package.sessions[session][storage]
+                if isinstance(entry, dict):
+                    s = SessionDict()
+                    fl = dflags
+                elif isinstance(entry, list):
+                    s = SessionList()
+                    fl = lflags
+                else:
+                    s = SessionStr()
+                    fl = sflags
+                s.build(session,storage)
+                s._import(db, entry, fl)
+
+        for validator in package.validators:
+            v = Validator()
+            v.build(validator)
+            v._import(db, package.validators[validator], dflags)
+
 
-- 
1.7.9.6


From 29eddabc37a5f8057de8f0ab1ae71fdc3f658ed6 Mon Sep 17 00:00:00 2001
From: adam traub <adamtraub@EdPA-LinuxBox.(none)>
Date: Sat, 8 Sep 2012 14:57:09 -0400
Subject: [PATCH 6/6] added a comment

---
 cli/mogu |    1 +
 1 file changed, 1 insertion(+)

diff --git a/cli/mogu b/cli/mogu
index fc947c1..6c0d4fb 100755
--- a/cli/mogu
+++ b/cli/mogu
@@ -89,6 +89,7 @@ db = Redis(args.redis_host, args.redis_port, args.redis_db, args.redis_auth)
 if command == "import":
     importdb.import_file(db, args, args.command[1:])
 
+# mogu import-directory directory D [--merge --redis-port --redis-host --redis-select --redis-auth --redis-flush --assume-yes --test-only]
 if command == "import-directory":
     for directory in args.command[1:]:
         dir_path = directory +"/"
-- 
1.7.9.6

